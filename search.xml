<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>进程池</title>
      <link href="/2018/10/11/%E8%BF%9B%E7%A8%8B%E6%B1%A0/"/>
      <url>/2018/10/11/%E8%BF%9B%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="进程池子"><a href="#进程池子" class="headerlink" title="进程池子"></a>进程池子</h3><ul><li>当你成千上万的业务需要创建成千上万的进程时，我们可以提前定义一个进程池<a id="more"></a></li><li><p>from multiprocessing import Pool</p><ul><li>p = Pool(10) #进程池创建方式，类似空任务队列</li><li>p.apply(func,args) #阻塞</li><li>func：func指明该进程池种的进程要工作的函数</li><li>args：不定长接收进程池中进程工作函数的参数</li><li>p.apply_async(func,args) #非阻塞方式</li></ul><ul><li>func：func指明该进程池种的进程要工作的函数</li><li>args：不定长接收进程池中进程工作函数的参数</li></ul><ul><li>p.close() </li><li>关闭进程池，不再接收新的任务了。</li><li>p.join() **</li><li>进程池里的进程资源要在关闭进程之后回收</li><li>阻塞：单进程 | 串行 | 同步 | 多个进程可以排着队</li><li>apply</li><li>同一时间只能有一个进程来工作，其他进程等待这个进程的工作函数有了返回结果才能开启工作。</li><li>非阻塞：多进程 | 并发 | 异步</li><li>apply_async</li><li>会在CPU核心数的基础上立即调用所有可用进程池中的进程资源来工作</li></ul></li><li><p>apply：</p><ul><li><p>获取子进程返回值</p></li><li><p>直接获取这个函数的返回值即可</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> range(<span class="number">12</span>):</span><br><span class="line">res.append(p.apply(func=work,args=(var,)))</span><br></pre></td></tr></table></figure></li><li><p>ret = apply_async</p><ul><li>非阻塞多进程执行之后返回的是一个抽象的进程返回结果</li><li>我们需要再次对这个进程返回结果再实际获取才可以拿到进程池工作之后的返回值</li><li>ret.get() 拿到进程池进程执行之后的返回结果</li></ul></li><li><p>避免了进程多次创建而带来的效率上的损耗</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 进程池 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>进程间通信(四)</title>
      <link href="/2018/10/11/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-%E8%A1%A5%E5%85%85/"/>
      <url>/2018/10/11/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h1 id="共享内存的另外一种实现方式"><a href="#共享内存的另外一种实现方式" class="headerlink" title="共享内存的另外一种实现方式"></a>共享内存的另外一种实现方式</h1><h3 id="Array-共享数组"><a href="#Array-共享数组" class="headerlink" title="Array(共享数组)"></a>Array(共享数组)</h3><h3 id="Value-共享变量"><a href="#Value-共享变量" class="headerlink" title="Value(共享变量)"></a>Value(共享变量)</h3><a id="more"></a><ul><li><p>类似Array的共享数组</p></li><li><p>共享内存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">有符号的 int类型  i</span><br></pre></td></tr></table></figure></li><li><p>from multiprocessing import Value</p><ul><li>Value(typecode_or_type, *args, lock=True)<ul><li>typecode_or_type：当前的数据类型 i</li><li>args: 为当前的value分配默认值的</li></ul></li></ul></li><li><p>v = Value(‘i’,0)</p><ul><li>v.value  获取到这个值</li><li>v.value = xxx  修改这个共享数据</li></ul></li></ul><h3 id="多种进程间通信的利弊总结"><a href="#多种进程间通信的利弊总结" class="headerlink" title="多种进程间通信的利弊总结"></a>多种进程间通信的利弊总结</h3><ul><li>Queue<ul><li>优点：<ul><li>支持所有Python中的对象</li><li>容易上手，q.put q.get</li><li>一定要判断清楚他的阻塞情况。一般都是阻塞。</li></ul></li><li>缺点：<ul><li>效率低一些</li><li>是会在数据访问的时候，不太安全，大并发下可能在非阻塞时拿取节奏是乱序的，那么造成数据混淆。</li></ul></li></ul></li><li>Pipe<ul><li>优点：<ul><li>相对要支持数据保护。</li></ul></li><li>缺点：<ul><li>一对一，多对一共享可以,多对多共享是会很乱的.注意理清管道使用顺序</li></ul></li></ul></li><li>Event<ul><li>优点<ul><li>可以在多进程里控制执行顺序</li><li>效率上要厉害一些</li></ul></li><li>缺点<ul><li>无法交流数据</li></ul></li></ul></li><li>Array 一个数组  </li><li>Value 一个值<ul><li>优点:<ul><li>来源于共享内存实现,效率很高</li><li>提供了数据的锁支持,维护了数据的安全性.<ul><li>安全的代价:有锁,并行变串行.</li></ul></li></ul></li><li>缺点:<ul><li>无法支持复杂数据类型</li></ul></li></ul></li></ul><h3 id="除去以上多进程通信的惯有方式"><a href="#除去以上多进程通信的惯有方式" class="headerlink" title="除去以上多进程通信的惯有方式"></a>除去以上多进程通信的惯有方式</h3><ul><li>文件<ul><li>pickle</li><li>文件读写指针在多进程访问的时候,彼此独立.</li></ul></li><li>数据库也可以做进程通信<ul><li>做语言的跨进程通信</li></ul></li><li>套接字<ul><li>Unix套接字 可以在多进程里通信</li></ul></li></ul><ul><li>键值对形式 字典</li><li>表</li></ul><p>OOP: 桌面软件:VC++ MFC</p><p>C++ QT Creater 跨平台 可以在windows下写一个软件 直接放到Linux下用 IOS 安卓</p><p>PyQT </p><h1 id="进程池"><a href="#进程池" class="headerlink" title="进程池"></a>进程池</h1><h1 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 进程间通信(四) </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>进程间通信(三)</title>
      <link href="/2018/10/11/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-%E4%B8%8B/"/>
      <url>/2018/10/11/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<ul><li>并行：服务器程序的并行执行</li><li>并发：业务劈天盖地的来了<ul><li>并发是同时发起的请求<a id="more"></a></li><li>服务支持高并发</li></ul></li><li>程序实现并行</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">网络编程：预习一下TCP协议</span><br><span class="line"><span class="comment">#看看网上关于DDOS攻击的Python实现代码</span></span><br></pre></td></tr></table></figure><blockquote><p>我通过进程间通信的方式，可以让一个数据被多个进程共享。</p><p>临界资源:同一时间只能让一个任务来访问的；硬件设备，插拔设备的。</p></blockquote><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><h3 id="Pipe"><a href="#Pipe" class="headerlink" title="Pipe"></a>Pipe</h3><h3 id="Event"><a href="#Event" class="headerlink" title="Event"></a>Event</h3><h3 id="Array、Value-共享内存"><a href="#Array、Value-共享内存" class="headerlink" title="Array、Value(共享内存)"></a>Array、Value(共享内存)</h3><ul><li><p>底层C语言实现的，Linux内核的东西。效率非常高，但是支持性差</p></li><li><p>from multiprocessing import Array</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = Array(typecode_or_type,size_or_initializer,lock=True)</span><br><span class="line"></span><br><span class="line">typecode_or_type：数据类型</span><br><span class="line">unsigned  signed </span><br><span class="line">chr:    b       B     <span class="number">8</span>位</span><br><span class="line">short:  h       H</span><br><span class="line">int:    i       I</span><br><span class="line">long:   l       L</span><br><span class="line">float:      f</span><br><span class="line">double:     d</span><br><span class="line">size_or_initializer：数据长度</span><br><span class="line">lock：当有一个进程在访问这个数据资源的时候，其他进程访问不了。</span><br><span class="line">当lock为True时，我们可以在访问的时候，通过下面两个函数来保护数据的访问顺序：</span><br><span class="line">a.acquire() 持锁</span><br><span class="line">a.release() 释放锁</span><br><span class="line">Array共享数组，更安全的通信方式</span><br></pre></td></tr></table></figure></li><li><p>创建出来的a是一个抽象的共享数组，那么可以通过类似列表切片的方式来实际展开其中数据。</p></li><li><p>short：短整型</p><ul><li>有符号的：-32768 ~ 32767</li><li>无符号的:0~65535</li></ul></li><li><p>int：整型 </p><ul><li>64位电脑：<ul><li>32位长度</li><li>有符号的：-2147483648 ~ 2147483647</li><li>无符的号：0~4294967295</li></ul></li><li>32位电脑：<ul><li>16位长度</li><li>有符号的：-32768 ~ 32767</li><li>无符号的:0~65535</li></ul></li></ul></li><li><p>long：长整形 一般是你的计算机有多长 long就会有多长</p><ul><li>64位：<ul><li>有符号的：-(2 <strong> 63) ~   +(2</strong>63 - 1)</li><li>无符号的：0 ~ (2**64) -1</li></ul></li><li>32位：<ul><li>有符号的：-(2 <strong> 31) ~   +(2</strong>63 - 1)</li><li>无符号的：0 ~ (2**64) -1</li></ul></li></ul></li><li><p>chr：字符型</p><ul><li>8位<ul><li>无符号：0~255 <ul><li>Ascii码表 </li><li>文件系统的命名</li><li>IP地址</li></ul></li><li>无符号：-128~127</li></ul></li></ul></li><li><p>float：单精度浮点型</p><ul><li>32bit</li></ul></li><li><p>double float：双精度浮点型</p><ul><li>64bit</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 进程间通信(三) </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>进程间通信(二)</title>
      <link href="/2018/10/11/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-%E4%B8%AD/"/>
      <url>/2018/10/11/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="pipe"><a href="#pipe" class="headerlink" title="pipe"></a>pipe</h3><ul><li>首先：多个进程可以享用同一个端，也就是一个管道支持多进程通信</li><li>非常安全的操作<a id="more"></a><h3 id="信号-状态-通信"><a href="#信号-状态-通信" class="headerlink" title="信号(状态)通信"></a>信号(状态)通信</h3></li><li>Event ：一般用来控制进程间执行顺序的<ul><li>父进程开启了一个子进程<ul><li>子进程在工作的时候，必须是有某些条件达成</li></ul></li><li>from multiprocessing import Event <ul><li>e = Event()</li><li>e.wait() 在进程内部设置为阻塞</li><li>e.set() 把e状态设置为开启 True</li><li>e.clear() 把e状态设置为阻塞 False</li></ul></li></ul></li></ul><hr><ul><li>非阻塞：Queue支持 <ul><li>缺点：取数据娶不到的时候，直接抛出异常</li><li>好处：是不影响接下来的事情</li><li>分清楚，接下里的事情有没有用到阻塞时要获取到的数据</li></ul></li><li>阻塞：<ul><li>Queue和Pipe均支持<ul><li>访问数据的时候，安全</li><li>会影响到下面继续工作的和这个数据无关紧要的内容</li></ul></li></ul></li><li>Queue：<ul><li>好用    <ul><li>q.get</li><li>q.put</li></ul></li><li>可以多进程对多进程通信，方便</li><li>一定要记得维护阻塞非阻塞。</li></ul></li><li>Pipe：<ul><li>多对多进程通信比较麻烦维护</li><li>也支持一对多进程和一对一进程通信，父子进程通信。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 进程间通信(二) </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>进程间通信(一)</title>
      <link href="/2018/10/11/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-%E4%B8%8A/"/>
      <url>/2018/10/11/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h1 id="多进程通信"><a href="#多进程通信" class="headerlink" title="多进程通信"></a>多进程通信</h1><h3 id="Queue：共享消息队列"><a href="#Queue：共享消息队列" class="headerlink" title="Queue：共享消息队列"></a>Queue：共享消息队列</h3><ul><li>Rabbit Message Queue 和我们的Queue类似。</li><li>什么数据都可以装！甚至是文件对象，数据库句柄，对象，都可以！<ul><li>但是无法直接看到这个共享队列里的数据</li><li>&lt;multiprocessing.queues.Queue object at 0x7f1388bdb4a8&gt;<a id="more"></a></li></ul></li><li>特殊的数据，可以在多进程之间共享这个队列</li><li>from <strong>multiprocessing</strong> import Queue</li><li><p>q = Queue()</p><ul><li>阻塞：会等待操作成功执行之后才会有返回。你才能继续接下来的事情。</li><li>q.<strong>get</strong>(block=True) 阻塞 | q.get_nowait 非阻塞<ul><li>向队列中取一个值出来</li></ul></li><li>q.<strong>put</strong>(block=True) 阻塞 | q.put_nowait 非阻塞<ul><li>向队列中放一个值进去</li><li>成功放入返回None，反之则抛出异常</li></ul></li><li>q.empty()<ul><li>判断共享队列是否为空</li></ul></li><li>q.full()<ul><li>判断队列是否是满的</li></ul></li><li>q.qsize()<ul><li>返回当前共享队列的数据个数</li></ul></li><li>q.close()<ul><li>关闭共享队列</li></ul></li></ul></li><li><p>进程的创建并不代表进程的实际执行顺序，所以叫并发。</p><ul><li>如果需要维护进程间执行顺序，需要同步</li></ul></li></ul><hr><ul><li>I：in 流入</li><li>O：Out 流出<ul><li>一般取决与读写速度</li></ul></li></ul><hr><ul><li>阻塞：等待一些特殊情况触发<ul><li>数据可能没来，那么阻塞</li><li>数据来了，在加工，也阻塞</li><li>数据来了，也加工好了，但是我不想做。挂起的。</li></ul></li></ul><hr><h3 id="Pipe：管道，默认为全双工"><a href="#Pipe：管道，默认为全双工" class="headerlink" title="Pipe：管道，默认为全双工"></a>Pipe：管道，默认为全双工</h3><ul><li><strong>全双工</strong>：两端同时都可以in/out</li><li>半双工：同时只支持一端out，另一端in</li><li>单工：只支持in或者out</li><li>管道传输的数据一定是一个pickle模块处理过后的pickle数据，是一个二进制的。</li><li><p>from multiprocessing import Process,Pipe</p><ul><li><p>Pipe(duplex=True) 全双工 </p><ul><li>默认为True</li></ul></li><li>left_pipe,right_pipe = Pipe(duplex=True)</li><li>parent_pipe,child_pipe = Pipe(duplex=True)</li><li>pickle_obj = pipe.recv() <ul><li>从端口中读数据</li></ul></li><li>pipe.send(pickle_obj) <ul><li>从端口中写数据</li></ul></li><li>pipe.close()<ul><li>关闭管道，在不适用的时候一定要记得关闭两端。</li></ul></li></ul></li><li>只支持两端对话，所以多进程超过2以上，那么可能需要换一种模型，或者创建多管道。</li></ul><h3 id="生产者消费者模型作业"><a href="#生产者消费者模型作业" class="headerlink" title="生产者消费者模型作业"></a>生产者消费者模型作业</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">作业：设置两个进程，A,B</span><br><span class="line">A：生产者</span><br><span class="line">B：消费者</span><br><span class="line">用管道来实现</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 进程间通信(一) </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Process多进程</title>
      <link href="/2018/10/11/Process%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
      <url>/2018/10/11/Process%E5%A4%9A%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<ul><li><p>复习：</p></li><li><p>僵尸状态：是一个进程在执行完任务之后，必须要经历的状态。</p></li><li><p>僵尸进程：子进程早就退出了，父进程不管。造成PCB（进程控制块）无法及时释放：导致无法创建新的进程。</p><a id="more"></a><pre><code>&gt; PID是有限的，65535</code></pre></li><li><p>孤儿进程：父进程先于子进程退出，就是孤儿进程。会有init进程（类Unix操作系统下的1号的进程）</p></li><li>短：short    2 ** 16</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span>**<span class="number">16</span></span><br><span class="line"><span class="number">65536</span></span><br></pre></td></tr></table></figure><ul><li>8bit == 1byte</li><li>short == 2byte == 65535</li></ul><h2 id="Python创建多进程"><a href="#Python创建多进程" class="headerlink" title="Python创建多进程"></a>Python创建多进程</h2><ul><li><p>multi：北极星</p></li><li><p>multiprocessing，python2.6之后版本才有的，属于内置模块，不需要额外安装</p></li><li><p>这个模块支持跨平台，支持Windows，类Unix</p><ul><li>os.fork：只支持linux</li></ul></li><li><p>通过模块创建子进程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line">Process(target=<span class="keyword">None</span>, name=<span class="keyword">None</span>, args=(), kwargs=&#123;&#125;, *, daemon=<span class="keyword">None</span>)</span><br><span class="line">target: 进程工作的任务函数</span><br><span class="line">name: 进程的名字</span><br><span class="line">args: 元组为形式，不定长接受 进程工作的任务函数的参数</span><br><span class="line">kwargs：早点为形式，不定长接受 进程工作的任务函数的参数</span><br><span class="line">这样创建的子进程实例，只会工作target参数所对应的函数。</span><br></pre></td></tr></table></figure></li><li><p>进程属性</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p = Process()</span><br><span class="line">p.start() 开启该进程</span><br><span class="line">p.pid 进程PID值，一定是在进程开启之后才能获取到</span><br><span class="line">p.name 进程名</span><br><span class="line">p.daemon=False 父进程会等待子进程退出才会退出，和守护进程经常没关系。</span><br><span class="line">p.daemon = True: 如果父进程结束，那么子进程也会结束，父进程可以不用在等待子进程结束了。</span><br><span class="line">必须在进程开启之前就要设置好</span><br><span class="line">p.join() 回收进程资源</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p = current_process()</span><br><span class="line">p.name</span><br><span class="line">p.pid</span><br><span class="line">p.daemon 能获取、不能修改</span><br></pre></td></tr></table></figure><ul><li>用multiprocessing.Process 创建僵尸进程，孤儿进程（5分钟左右），要用time模块。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Process多进程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>进程代码</title>
      <link href="/2018/10/11/%E8%BF%9B%E7%A8%8B%E4%BB%A3%E7%A0%81/"/>
      <url>/2018/10/11/%E8%BF%9B%E7%A8%8B%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<ul><li>Python实现多进程的方式 ： 创建多子进程</li><li>os.fork()<ul><li>属于C语言的创建内核方式，遗留在了Python种。</li><li>属于Linux平台下才可以使用。<a id="more"></a><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">这是父进程: <span class="number">25284</span></span><br><span class="line">这是子进程: <span class="number">25285</span></span><br><span class="line">---------------------</span><br><span class="line">这是父进程: <span class="number">25284</span>  原始父进程</span><br><span class="line">---------------------</span><br><span class="line">这是父进程: <span class="number">25285</span>  原始子进程</span><br><span class="line">---------------------</span><br><span class="line">新的子进程: <span class="number">25286</span>  继续自己开启新的子进程</span><br><span class="line">---------------------</span><br><span class="line">新的子进程: <span class="number">25287</span>  继续自己开启新的子进程</span><br></pre></td></tr></table></figure></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">os.getpid()</span><br><span class="line">返回当前进程的PID值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">os.waitpid(pid,options)</span><br><span class="line">pid：需要被回收的子进程ID值</span><br><span class="line">options: 默认为0，用来表示回收结果</span><br><span class="line">os.wait()</span><br><span class="line">等待所有子进程结束</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os.fork()</span><br><span class="line">父进程：返回创建好的子进程PID</span><br><span class="line">子进程：返回0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 进程代码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>进程探究</title>
      <link href="/2018/10/11/%E8%BF%9B%E7%A8%8B%E6%8E%A2%E7%A9%B6/"/>
      <url>/2018/10/11/%E8%BF%9B%E7%A8%8B%E6%8E%A2%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<ul><li>进程：这是一个在内存中运行的任务实例<a id="more"></a></li><li>Linux下进程属性：<ul><li>进程拥有自己独立的PID（身份证号）<ul><li>0 ~ 65535 PID是有限的</li><li>当你一台Linux有了超过65535个进程，第65536个进程 无法启动！</li></ul></li><li>独立的内存空间，独立的地址。</li><li>PID：<ul><li>0：这个进程是真正的调度进程(idle进程)，是系统初始化的第一个进程，是所有其他进程的祖先！</li><li>1：这个进程是Init进程，后续的系统启动，由0进程创建，第一个子进程，完成剩余的系统引导工作。</li><li>2：线程/进程 管理进程</li></ul></li><li>PCB控制块 process control block<ul><li>进程PCB是用来管理进程，维护进程属性的一个数据块</li><li>记录进程中的属性特征，进程的运行状态</li><li>没有合法PCB的进程，不会被操作系统所识别管理</li></ul></li><li>PCB进程控制块中主要有以下：<ul><li>进程标识符 PID。</li><li>调度信息：进程优先级</li><li>进程状态：挂起，就绪，执行，中断，僵尸。</li><li>进程使用的内存空间：文件，套接字（socket），网卡，硬件设备。</li><li>处理器信息：计数器，寄存器，指针。</li></ul></li></ul></li></ul><hr><ul><li>进程的状态：<ul><li><strong>R</strong>：就绪/运行 READY RUNNING<ul><li>实际在CPU上运行的进程，可以被称作运行状态</li><li>接下来要执行的进程，处于就绪状态，那么也会被称作R</li></ul></li><li><strong>S</strong>：可中断睡眠状态<ul><li>进程去等待资源，等待别人链接，等待读取文件内容，等待打开硬件设备，CPU资源不够用</li><li>等待的进程，有专门的任务队列维护，通过一定的事件可以重新激活这些进程进入运行状态R</li></ul></li><li>D：不可中断睡眠状态<ul><li>一般是一些内核进程，Kill -9无法直接杀死，并且无法直接唤醒</li><li>这样的进程也处于睡眠状态</li><li>这种睡眠状态是为了保护一些硬件资源，保护一些设备。</li></ul></li><li>T：暂停状态<ul><li>调试程序，打断点</li></ul></li><li>X：停止状态</li><li><strong>Z</strong>：进程在退出时，必须要经过<strong>僵尸状态</strong>。<ul><li>每个进程在退出的时候，都会释放掉内存，但是如果父进程并没有对他做PCB释放，</li><li>这个PCB进程控制块就会保留下来，会一致占用PID</li></ul></li></ul></li></ul><hr><ul><li><p>僵尸进程：</p><ul><li>父进程创建子进程，但是并没有及时回收工作完毕的子进程</li><li>没有被释放资源的子进程就会被称作僵尸进程</li><li>在于PCB进程控制块无法及时得到释放，所以会导致无法创建新的进程，占用了PID资源。</li><li>注意：开发者要注意回收僵尸进程，没人会帮你释放僵尸进程。</li></ul></li></ul><ul><li><p>孤儿进程：</p><ul><li>父进程先结束了</li><li>还在执行的子进程没人管了。</li><li>孤儿进程就由此诞生了</li><li>孤儿进程会被INIT进程接管，然后完成之后，INIT进程帮你回收。</li></ul></li></ul><hr><ul><li><p>进程状态下一级别：</p><ul><li><p>s：进程的会话负责人</p></li><li><p>&lt;：进程有高优先级</p></li><li><p>N：进程有低优先级</p></li><li><p>l：具备多线程的进程</p></li><li><p>+：位于后台的进程</p></li></ul></li></ul><hr><ul><li><p>Nice值：Linux进程优先级 整数</p><ul><li>权限：-20 - +19</li><li>数字越小，优先级越高</li><li>只有超级用户可有把进程优先级设置为负数</li></ul></li><li><p>VSZ：进程占用的虚拟内存大小</p></li><li><p>RSS：这个进程占用的固定内存大小</p></li><li><p>PRI/NI：进程优先级</p></li><li><p>TTY：打开的虚拟终端</p></li><li><p>PPID：当前进程的父进程ID</p></li><li><p>COMMAND：开启这个进程的命令</p></li><li><p>USER：开启进程的用户（表示了当前进程有什么样的权利）</p></li><li><p>F：进程旗标(process flag)</p><ul><li>进程的权限</li><li>4：ROOT权限</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 进程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小时</title>
      <link href="/2018/09/21/%E5%B0%8F%E6%97%B6/"/>
      <url>/2018/09/21/%E5%B0%8F%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<p>特快列车启程目的地无限定<br>要奔赴一切生而未见的风景<br>两侧草木渐次鲜明 像少年怀抱的憧憬<br>稻草人向乘客遥遥脱帽致敬<br>小女巫骑扫帚狡黠地眨眼睛<br>隔车窗挥手示意 转身朝太阳飞去<br><a id="more"></a><br>穿过一片茂密森林 叶缝漏下竖琴<br>被路过的独角兽 腾越间拨弄出旋律<br>杯中收纳了虚空倒影 畅饮这一泓蓝天白云<br>仿佛有微尘宇宙 可盘桓在 方寸手掌心<br>愈见识孤崖溶洞殊异 愈贪恋前路未知玄奇<br>世界大大 同行寥寥 而我的魂魄荧荧<br>像化作仲夏夜的萤火与星辰<br>又融入沿途小镇第一缕晨曦<br>转过身原野深深 炊烟飞入远山雾云<br>翻山越岭攀爬过多少龙的背脊<br>屏息凝神时空隧道中翻检光阴<br>那些梦仍是年轻 纵使青春将老去<br>亲爱的麦田守护者 抖一抖稻草衣襟<br>风声如宽容叹息 纵容我飞奔去 远行<br>拥有一整颗孤独行星 需要多么难得的幸运<br>帽檐下沉静双眼 竟可饱览 全世界盛景<br>侧耳听地心脉搏沉郁 探身捉山巅朔风疾劲<br>天光云影 万籁俱寂 路过 又一季人生<br>那些我深爱却终究在静默中擦肩的人们<br>那些岁月潮洪狼藉风雪中留下的足痕<br>于记忆瀚海 多轻盈地浮沉<br>与生命依存<br>荒原上那最寂寞的蚁 狂风中那逆飞的流萤<br>皆如太无名的你 眸中安放 这无涯天地<br>为某个陌生笑容倾心 对某种难述的美衷情<br>生似飘萍 逐波前行 才有幸偶遇诸多奇景<br>牵着吟游诗人的背影 漂泊无依中安身立命<br>山河梦境 疾奔过眷恋过 融入一颗心<br>倘使某日再从头翻忆 仍有如绢似绸的暖意<br>那便是你 生而为人 曾经 存在的印迹</p>]]></content>
      
      
      
        <tags>
            
            <tag> 路过世界的梦想家 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
